---
# RHEL/CentOS only. Set a repository to use for PostgreSQL installation.
postgresql_enablerepo: ""

# Set postgresql state when configuration changes are made. Recommended values:
# `restarted` or `reloaded`
postgresql_restarted_state: "restarted"

postgresql_python_library: python-psycopg2
postgresql_user: postgres
postgresql_group: postgres
postgresql_packages_extra: []

postgresql_manage_user:
postgresql_manage_host:

# `md5` or `scram-sha-256` (https://www.postgresql.org/docs/10/auth-methods.html)
postgresql_auth_method: "{{ ansible_fips  | ternary('scram-sha-256', 'md5') }}"

postgresql_unix_socket_directories:
  - /var/run/postgresql

postgresql_service_state: started
postgresql_service_enabled: true

# Global configuration options that will be set in postgresql.conf.
postgresql_global_config_options:
  unix_socket_directories: '{{ postgresql_unix_socket_directories | join(",") }}'
  log_directory: 'log'

# Host based authentication (hba) entries to be added to the pg_hba.conf. This
# variable's defaults reflect the defaults that come with a fresh installation.
postgresql_hba_entries:
  - {type: local, database: all, user: postgres, auth_method: peer}
  - {type: local, database: all, user: all, auth_method: peer}
  - {type: host, database: all, user: all, address: '127.0.0.1/32', auth_method: "{{ postgresql_auth_method }}"}
  - {type: host, database: all, user: all, address: '::1/128', auth_method: "{{ postgresql_auth_method }}"}

# Debian only. Used to generate the locales used by PostgreSQL databases.
postgresql_locales:
  - 'en_US.UTF-8'

# Databases to ensure exist.
postgresql_databases: []
# - name: exampledb # required; the rest are optional
#   lc_collate: # defaults to 'en_US.UTF-8'
#   lc_ctype: # defaults to 'en_US.UTF-8'
#   encoding: # defaults to 'UTF-8'
#   template: # defaults to 'template0'
#   login_host: # defaults to 'localhost'
#   login_password: # defaults to not set
#   login_user: # defaults to '{{ postgresql_user }}'
#   login_unix_socket: # defaults to 1st of postgresql_unix_socket_directories
#   owner: # defaults to postgresql_user
#   state: # defaults to 'present'

# Users to ensure exist.
postgresql_users: []
# - name: jdoe #required; the rest are optional
#   password: # defaults to not set
#   encrypted: # defaults to not set
#   priv: # defaults to not set
#   role_attr_flags: # defaults to not set
#   db: # defaults to not set
#   login_host: # defaults to 'localhost'
#   login_password: # defaults to not set
#   login_user: # defaults to '{{ postgresql_user }}'
#   login_unix_socket: # defaults to 1st of postgresql_unix_socket_directories
#   state: # defaults to 'present'

# Whether to output user data when managing users.
postgres_users_no_log: true

postgres_temp_template_script_path: /tmp/ansible-postgre-script/
postgres_cron_template_script_path: /opt/postgresql
postgresql_job_backup_db: "/usr/local/bin/postgre_dump_db.ps1"
postgresql_job_backup_cluster: "/usr/local/bin/postgre_backup_cluster.ps1"
postgresql_job_cleanup: "/usr/local/bin/Remove-Backup.ps1"

# import role from https://github.com/Sopholos/ansible_role_cron.git
postgresql_crontab_role_path: ../../../linux/role_cron

# postgres_restore:
#   restore_sets:
#     - name: "Postgre_{{ postgresql_version }}-{{ postgresql_cluster_name }}_testdb_restore"
#       cron:
#         weekday: "*"
#         hour: 4
#         minute: 0
#         disabled: true
#         user: "{{ postgresql_user }}"
#       dumps:
#         - destinationDB: untouched_testdb
#           backupFolder: "{{ postgres_restore_backupFolder }}"
#           s3Bucket: "{{ s3_bucket_backup_dbs.bucket }}"
#           s3Profile: pg
#           s3Endpoint: "{{ s3_http_endpoint }}"
#           backupFilter: "?starts_with(Key, '{{ postgres_restore_backupFolder }}/testdb_') && ends_with(Key, '.dmbk.done')"
#           sql: []

# postgres_backup:
#   backup_sets:
#     - name: "Postgre {{ postgresql_version }}-{{ postgresql_cluster_name }} testdb dump"
#       cron:
#         weekday: "*"
#         hour: 1
#         minute: 0
#       dump:
#         user: "backup_dumper"
#         password: "{{ postgres_backup_dumper_password }}"
#         host: localhost
#         port: 5432
#         database: testdb
#         backupFolder: "s3://{{ s3_bucket_backup_dbs.bucket }}/{{ common_cluster_name }}/{{ postgresql_version }}-{{ postgresql_cluster_name }}/dump"
#         s3Profile: pg
#         s3Endpoint: "{{ s3_http_endpoint }}"

#   backup_cluster_sets:
#     - name: "Postgre {{ postgresql_version }}-{{ postgresql_cluster_name }}"
#       cron:
#         weekday: "*"
#         hour: 4
#         minute: 0
#         # disabled: true
#       cluster:
#         user: replicator
#         host: localhost
#         port: 5432
#         backupFolder: "{{ postgresql_archive_write_dir }}/full"

#   - name: "Postgre {{ postgresql_version }}-{{ postgresql_cluster_name }}-s3"
#     cron:
#       weekday: "*"
#       hour: 4
#       minute: 0
#       # disabled: true
#     cluster:
#       user: replicator
#       host: localhost
#       port: 5432
#       backupFolder: "s3://{{ s3_bucket_backup_dbs.bucket }}/{{ common_cluster_name }}/{{ postgresql_version }}-{{ postgresql_cluster_name }}/full"
#       compress: 1
#       s3TempPath: /tmp/dbbackupcluster
#       s3Profile: pg
#       s3Endpoint: "{{ s3_http_endpoint }}"
